{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","setCita","error","setError","mensajeEnviado","setMensajeEnviado","handlerState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","setTimeout","type","placeholder","onChange","Cita","eliminarCita","onClick","App","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4170344.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n  //Crear el estado de las citas \r\n  const [cita, setCita] = useState({\r\n    mascota: '',\r\n    propietario: '',\r\n    fecha: '',\r\n    hora: '',\r\n    sintomas: ''\r\n  })\r\n\r\n  //Creando estado del error\r\n  const [error, setError] = useState(false);\r\n\r\n  //Para dar mensj al usuario que sus datos se guardaron bien\r\n  const [mensajeEnviado, setMensajeEnviado] = useState(false);\r\n\r\n\r\n  const handlerState = e => {\r\n    setCita({\r\n      //Nos traemos una copia con los puntos\r\n      ...cita,\r\n    [e.target.name]: e.target.value\r\n    })\r\n   }\r\n\r\n  //Extraer valores de las citas\r\n  const {mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n\r\n  //Cuando el usuario presione agregar cita\r\n  const submitCita = e => {\r\n    e.preventDefault();\r\n\r\n    //Validar\r\n    if(\r\n       mascota.trim() === '' ||\r\n       propietario.trim() === '' ||\r\n       fecha.trim() === '' ||\r\n       hora.trim() === '' ||\r\n       sintomas.trim() === '' \r\n    ){\r\n       setError(true);\r\n       return;\r\n    }\r\n    setError(false);\r\n\r\n    //Agregar un ID\r\n    cita.id = uuidv4();;\r\n\r\n    //Crear una cita\r\n    crearCita(cita)\r\n\r\n    //Mostramos mensaje de exito\r\n    setMensajeEnviado(true)\r\n    //Ocultar el mensaje de exito\r\n    setTimeout(() =>{\r\n        setMensajeEnviado(false)\r\n    },3000)\r\n\r\n    //Limpiar formulario\r\n    setCita({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    })\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <h2>Crear cita</h2>\r\n       {error ? <p className=\"alerta-error\">Todos los campos son obligatorios!</p> : null} \r\n       {mensajeEnviado ? <p className=\"alerta-enviado\">Sus datos fueron guardados exitosamente!</p> : null} \r\n       {/* {error && <p className=\"alerta-error\">Todos los campos son obligatorios</p>}  */}\r\n      <form\r\n        onSubmit={submitCita}\r\n      >\r\n        <label>Nombre de Mascota</label>\r\n        <input \r\n          type=\"text\" \r\n          name=\"mascota\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre mascota\"\r\n          value={mascota}\r\n          onChange={handlerState}\r\n        />\r\n        <label>Nombre del Dueño</label>\r\n        <input \r\n          type=\"text\" \r\n          name=\"propietario\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre del dueño de la mascota\"\r\n          value={propietario}\r\n          onChange={handlerState}\r\n        />\r\n        <label>Fecha Ingreso</label>\r\n        <input \r\n          type=\"date\" \r\n          name=\"fecha\"\r\n          className=\"u-full-width\"\r\n          value={fecha}\r\n          onChange={handlerState}\r\n        />\r\n        <label>Hora Ingreso</label>\r\n        <input \r\n          type=\"time\" \r\n          name=\"hora\"\r\n          className=\"u-full-width\"\r\n          value={hora}\r\n          onChange={handlerState}\r\n        />\r\n        <label>Síntomas</label>\r\n        <textarea \r\n          name=\"sintomas\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"¿Cuales son los síntomas?\"\r\n          value={sintomas}\r\n          onChange={handlerState}\r\n        ></textarea>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"u-full-width button-primary\"\r\n        >\r\n          Agregar Cita\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Cita= ({cita: {mascota, propietario, fecha, hora, sintomas, id},eliminarCita}) => {\r\n    return ( \r\n        <div className=\"cita\">\r\n            <p>Mascota: <span>{mascota}</span></p>\r\n            <p>Propietario: <span>{propietario}</span></p>\r\n            <p>Fecha: <span>{fecha}</span></p>\r\n            <p>Hora: <span>{hora}</span></p>\r\n            <p>Síntomas: <span>{sintomas}</span></p>\r\n            <button \r\n            onClick={() => eliminarCita(id)} \r\n            className=\"button eliminar u-full-width\"\r\n            >Eliminar &times;</button>\r\n        </div>\r\n    );\r\n}\r\n \r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;\r\n\r\n\r\n\r\n","import {useState, useEffect} from 'react';\nimport Formulario from './components/Formulario'; \nimport Cita from './components/Cita';\n\nfunction App() {\n\n  //Citas en el localStorage\n  //Estado de todas las citas\n  const [citas, setCitas]= useState(JSON.parse(localStorage.getItem('citas')) || []);\n\n\n  useEffect(() => {\n      localStorage.setItem('citas', JSON.stringify(citas))\n  }, [citas])\n\n  //Funcion que tome todas las citas y agregue una nueva\n  const crearCita = cita =>{\n    setCitas([\n      ...citas,\n      cita\n    ])\n  };\n\n  //Funcion encargada de eliminar tarjetas(citas)\n  const eliminarCita = id =>{\n    const nuevasCitas = citas.filter(cita => cita.id !== id)\n    setCitas(nuevasCitas);\n  }\n\n\n  return (\n    <div>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n            crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{citas.length === 0 ? 'No hay citas' : 'Administra tus citas'}</h2>\n            {citas.map(cita => (\n              <Cita\n              cita={cita}\n              key={cita.id}\n              eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}